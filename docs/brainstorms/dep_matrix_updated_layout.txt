




             x4          x3         x2          x1          x0
             |           |           |           |           |
       +---+---+---+---+---+---+---+---+---+---+---+---+     |
       |     |     |     |     |     |     |Cx1^ |Cy0^ | +===+===+
       |           |           |           |Ay0   Ax1  | |C     A|
    y0-|- - -|- - -|- - -|- - -|- - -|- - -|- - -|- - -|-+       +<------
       |           |           |           |Cx1^  Cy1^ | |B      |
       |     |     |     |     |     |     |By0  |bx1  | +===+===+
       +---+---+---+---+---+---+---+---+---+-----|-----+     |
       |     |     |     |     |     |     | +===+===+       |
       |           |           |           | |C     A|       |
    y1-|- - -|- - -|- - -|- - -|- - -|- - -|-+       +<------*
       |           |           |           | |B      |
       |     |     |     |     |     |     | +===+===+
       +---+---+---+---+---+---+-----|-----+     |
       |     |     |     |     | +===+===+       |
       |           |           | |       |       |
    y2-|- - -|- - -|- - -|- - -|-+       +<------*
       |           |           | |       |
       |     |     |     |     | +===+===+
       +---+---+---+-----|-----+     |
       |     |     | +===+===+       |
       |           | |       |       |
    y3-|- - -|- - -|-+       +<------*
       |           | |       |
       |     |     | +===+===+
       +-----|-----+     |
         +===+===+       |
         |       |       |
    y4- -+       +<------*
         |       |
         +===+===+



    KEY:

        " ^ " = XOR,

        [A,B,C] = operands,

        X-axis: sent to newer instructions to compare against,

        Y-axis: send to older instructions to compare against.




 Discoveries made while updating the design:

 - How simple and small the "unary_count" units are
 - As only WAW and RAW dependencies are checked, the hardware can be organised to only do 4 calculations per "cell"
 - Basic idea of how flags, count, dependencies, etc effect the operand buffers

 A lot more research must be done to understand the true "data loop(s)" of the dependency matrix, aka the source and sink of all flags generated ans the output of the dep. matrix. After creating the first set of diagrams, I had assumed the loop would be:

     route_a: operand_queue ->  dependency_matrix -> operand_queue

     route_b: unary_count -> single_cycle_window ->  operand_queue  + unary_count

 Now I know route "a" and "b" both feed into flag generation, and then those feed back into each route:

     route_a: operand_queue ->  dependency_matrix -> flags

                      flags -> unary_count -> IF unary_count == 0 -> operand_queue


     route_b: still need to figure this out but flags generated from route_a AND route_b feed into SCW

                      flags -> single_cycle_window -> unary_count

 Hope this makes sense.




