
# PREFACE - DUAL WRITEBACK

Researching the hardware required for the single cycle window(SCW) scheduler has uncovered a
relatively simple way to implement aspects of suparscalar.

The use of "aspects" is very important, there are limitations on how far this implementation can go
before the hardware requirements are doubled.




## LIMITATIONS



### Instructions

The simplicity of the proposed superscalar implementation relies on allowing instructions which
writeback to seperate locations to do so in the same cycle. At first glance, range of instructions
that can do so may be small, nevertheless, the impact is likely very significant.

Units with seperare storage locations are as follows:

    - General Purpose Registers(GPR): ALU, ALX
    - Program Counter: Branch, Jump, Prediction, etc.
    - Flags Registers: Bound to GPR entries (multiporting is trivial at low bit count)
    - Main Memory: WRITE

These are the main units/locations, but note that there may be edge cases which can be taken
advantage of.


### Dependency Matrix

As the title of this document hinted to, without doubling the hardware requirements, only one
instruction can be issued per cycle. It goes without saying, this is a huge bottleneck.
However, jumping from:

    [ single issue, single writeback ] -> [ single issue, dual writeback ]

still increases instructions per clock(IPC) and allows for the dep. matrix to "catch up" after
stalls.

If we translate this in terms of hardware, it means upon a "dual writeback" clearing/invalidating
one instruction while another is evicted. This, however, will create bubbles in the dep. matrix
which can only be cleared/populated when a stall occurs.



## HARDWARE - SCHEDULER ABITRATION



To allow for dual writeback, there must be two schedulers. One for the "primary" unit and one for
the "secondary" units:

    Primary - GPRs

    Secondary - Any other location

Schedulers simply take in dependency flags from the previous cycle, does its own dependency checks,
and sends back its own flags:

    Dep. Matrix

O       RAW -->|                                                                              I
U              |                              +-------> Primary Scheduler  -> SCW + IZP       N
T       WAR -->|                              |                                               P
P              |-[stall]-+-> Decoder -> ?Abitration?                                          U
U   Scheduler  |         |                    |                                               T
T              |         |                    +-------> Secondary Scheduer -> SCW + IZP       S
S       SCW -->|         |
                         |
        IZP ------------>|

                                [ Figure 1 - Scheduler I/O]

Of each pair of schedulers, one must be selected, provided with flags and cleared without effecting
the other. To understand how, lets answer two questions:

    Question 1: What's the process of issuing an instruction in regards to dual writeback?

      A:
        -> When an instruction is decoded, a unit_id is generated
         -> Instruction is sent to the dependency matrix
          -> primary(P) or secondary(S) scheduler selected, based on unit_id
           -> If instruction is sent to P, disable flag outputs of S, vice versa

    Note, as the scheduler and dependency matrix functtions as a queue, all data and control logic
    must be passed to the next pair of schedulers(see Figure 2).


    Question 2: How are both sets of schedulers effected by stall flags?

       A:
         -> A decoder (Figure 1) decides how the scheduler operates, based on flags, at each pair
          -> The enabled scheduler behaves like normal and operates based on decoded flags
           -> The disabled scheduler will only react to commands to buffer

The hardware requirements to acheive these parts are simple to trivial.

Here's a simplified diagram which demonstrates the queue which makes up the two schedulers.

            +-----------+    +-----------+    +-----------+    +-----------+
            |  Primary  | -> |  Primary  | -> |  Primary  | -> |  Primary  | -> ...
            +-----+-----+    +-----+-----+    +-----+-----+    +-----+-----+
                  |                |                |                |
               Decoder          Decoder          Decoder          Decoder
                  |                |                |                |
            +-----+-----+    +-----+-----+    +-----+-----+    +-----+-----+
            | Secondary | -> | Secondary | -> | Secondary | -> | Secondary | -> ...
            +-----------+    +-----------+    +-----------+    +-----------+

                        [ Figure 2 - Abstracted Scheduler Queue ]



# CLOSING NOTES



As I typed this, I realise I could have a scheduler for EACH seperate unit. Which compared to
duplicating entire dependency matrixes seems temping. However, until "real world" testing on the
utilisation of dual writeback I will be sticking to two schedulers. Once again this comes down to
complexity and also the fact DUAL ISSUE could bring greater grains with the same addition of
complexity. We shall see.


### Location

Reading this I felt like it may be confusing how an instuction can writeback to a different unit
while also requiring data from the GPRs. This is enabled through "pointers", data which can be
used as an address:

    GPR source -> points to a location


While the instruction itself will decide on which unit which will be used:

    pointer -> Memory Address?
            -> Program Address?
            -> etc.


### Flags

An explination of all flags mentrioned would be out of the scope of this document. Another document
or diagramwill aim to fully outlining thet source and destination of all flags, there I can also
explain each one in detail. Doing this will not only to solidify the concepts but also preseent
opportunities to optimise.


### Unary Counter

After a while I realised the unary counter + single cycle window checks collectively act like a
scheduler. Thus, from now on I just refer to them as a scheduler.



