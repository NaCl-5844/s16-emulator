The dependancy matrix must:
    - append instruction_entries
    - asynchronous memory instruction_entry writeback
    - raise flags/notify control_unit of jumps, branches and stalls
    - instruction_entry writeback


DECODE

[ APPEND NON-ASYNC INSTRUCTION ]

    > Set counter to decoded i_cost
    > Set async_flag to 0
        - async_flag is a rs-latch 
        - async_flag=0: allows i_cost to decrement
    > issue to dep. matrix

[ APPEND ASYCHRONOUS INSTRUCTION ]
    
    > set counter to i_cost=1
        - forces instruction to stay in dep. matrix until async_flag is reset
    > Set async_flag = 1
        - async_flag is rs-latch 
        - when read/write buffer confirms completion, the latch is reset
        - counter will be cleared to 0
    > issue to dep. matrix

    

[ EXECUTE NON-ASYNC INSTRUCTION ]
    Each cycle:
    > if i_cost == 0 & stall == 0:
        - set complete_flag = 1
    > elif stall == 1: 
        continue # do nothing and move to next iteration
    > else: 
        - decrement i_cost by 1
    
[ EXECUTE ASYNC INSTRUCTION ]
    Each cycle:
    > if read_buffer[0]['i_tag'] in dependancy_matrix: # [0] = first position FIFO
        - set complete_flag = 1 of given i_tag
    > if write_buffer[0]['i_tag'] in dependancy_matrix: # [0] = first position FIFO
        - set complete_flag = 1 of given i_tag


[ WRITEBACK ASYNCHRONOUS WRITE ]

    > If write buffer full:
        - send signal to stall
        - end stall when write_buffer sends an entry to cache
    > Else, When data reaches write_buffer, send confirmation to dep. matrix
    
[ WRITEBACK ASYNCHRONOUS READ ]

    > Read instructions return cache data to read_buffer
    > read_buffer sequentally confirms instruction completion
    > 




class dependancy_matrix:
    def __init__(self, matrix_size):
        self.buffer_queue = collections.deque({}, matrix_size)
        self.offset_buffer_queue = collections.deque({}, matrix_size)
        
    def 