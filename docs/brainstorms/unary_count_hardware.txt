
# PREFACE

The unary counter serves two purposes:

  - As a countdown to when an instruction is complete.
  - Easily compare many couters for matching values.

Unary when only considering the most significant bit is perfect for this. Unlike binary where
comparing more than two values becomes rather complex, comparing unary values only need to
compare a single bit.


## UNARY COUNTER REQUIREMENTS

As each counter in tracks the time until completion, values
will only:
  
  a) Remain the same
  b) Decrement
  c) move one buffer* position
  d) Decrement and move one buffer* position
  e) Override data with previous entry(delete)
  
  *Unary_count is buffered along with operands

These simple requirements can be fufilled with a buffer with multiple gates which allow options
a, b, c and d.




## DECREMENTING BUFFER

One way to make the unary counter is to make down-shifters, in unary this is the same as
decrementing, which can then be organised as a buffer.


### Example 


Shifters collectvely acting as a FIFO buffer:

    t+0|    shifter -> shifter -> shifter
            [0010]     [1000]     [----]

    t+1|    shifter -> shifter -> shifter
            [0100]     [0010]     [1000]
        
each shifter can also decrement in-place:

    t+2|    shifter -> shifter -> shifter
            [0010]     [0001]     [0100]

or decrement and shift:

    t+3|    shifter -> shifter -> shifter
            [----]     [0001]     [0000]




## FLAGS/CONDITIONS 

This section focuses on the 4 requirements a, b, c, d and e, how flags effect the actions of the
buffer, and the logic required to do a given action.


a) remain the same

    Flags/Conditions
        
        - Not issued, isu [ issued ] == 0

    Hardware
    
        -> Independant write/update control of each counter
          -> Each counter is connected to a clock line
            -> Restrict write control wire from being clocked when above flags raised



b) Decrement

    Flags/Conditions
        
        - Issued; isu [ issued ] == 1

    Hardware

        -> Enable decrement control line when above flag raised
          -> Restrict write control wire from being clocked when above flags raised


c) Move one buffer position

    Flags/Conditions
        
        - New instruction enters dependency matrix
        - When the following counter reaches zero; next_unary_count == 0
  
    Hardware

        -> Independant write/update control of each counter
          -> ifz [IF 0] flag propagates to all counters ahead and including the original
            -> Each counter's clock line is connected to ifz_propagation line(s)
              -> Restrict write control wire(s) from being clocked based on ifz_propagation



d) Decrement and move one buffer position

    Flags/Conditions
        
        - Issued, isu [ issued ] == 1

        AND

        - New instruction enters dependency matrix
        - When the following counter reaches zero; next_unary_count == 0
  
    Hardware
        -> Independant write/update control of each counter
          -> Check isu == 1 AND ifz_propagation line
            -> Restrict write control wire(s) from being clocked based on ifz_propagation



e) Delete entry

    Flags/Conditions
        
        - When the current counter reaches zero; next_unary_count == 0
        - inv[alid] == 1

    Hardware

        -> Independant write/update control of each counter
          -> inv flag emulates ifz to reuse ifz_propagation
            -> Restrict write control wire(s) from being clocked based on ifz_propagation



















































































