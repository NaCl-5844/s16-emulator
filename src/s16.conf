[ EMULATION ]
# Cost: the number of cycles per access
COST              = False
# Cost modifer: per x bytes, cost increases by (?)
COST_MODIFIER     = 0
COST_READ_OFFSET  = 0
COST_WRITE_OFFSET = 2
STORE_TO_FILE     = True

[ Specification ]
# Changes to this section will likely break the emulation.
# page size in bytes
PAGE_SIZE = 16
# NOTE: Technically, with how my code works, the emulator could work with just L1_INST_CACHE. Could be useful for testing/comparing.
L1_CACHE  = True
L2_CACHE  = False


[ Read Only Memory ]
# Note: files, seperated by whitespace, will be loaded in sequential order.
ROM_FILE_NAMES    = flush_regs.bin xor_swap.bin
ROM_FILE_FORMAT   = bin
ROM_START_ADDRESS = 0x0000 

[ Program Counter ]
# Call Return stack
PC_CALL_DEPTH = 8


[ PREDICTION ]
# Reference Prediction Table -- {-1: off, 0: default, 1: aggressive}
REF_PREDICTION_TABLE_STRENGTH = 0
REF_PREDICTION_TABLE_DEPTH    = 4
# Branch Target Buffer
PC_BTB_DEPTH = 0

[Re-Order Buffer]
REORDER_BUFFER_DEPTH = 4



[ General Purpose Registers]
# Changes to this section will likely break the emulation.
GPR_MEMORY_SIZE = 32
GPR_MEMORY_COST = 0


[ Main Memory ]
MAIN_MEMORY_SIZE   = 512
MAIN_MEMORY_COST   = 0
MAIN_START_ADDRESS = 0x0080


[ L1 Cache ]
L1_DATA_CACHE_SIZE = 64
L1_DATA_CACHE_WAYS = 2
L1_DATA_CACHE_COST = 0
L1_DATA_CACHE_REPL = lru
L1_INST_CACHE_SIZE = 128
L1_INST_CACHE_WAYS = 2
L1_INST_CACHE_COST = 0
L1_INST_CACHE_REPL = lru


[ L2 Cache ]
L2_CACHE_SIZE = 128
L2_CACHE_WAYS = 2
L2_CACHE_COST = 8
L2_CACHE_REPL = lru
